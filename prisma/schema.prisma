// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]

  @@map("user")
}

model Post {
  id              String        @id @default(cuid())
  title           String
  content         String
  excerpt         String
  slug            String        @unique
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  featuredImage   String?
  authorId        String
  categoryId      String
  status          PostStatus    @default(DRAFT)
  visibility      Visibility    @default(PUBLIC)
  publishedOn     DateTime?
  user            User          @relation(fields: [authorId], references: [id])
  category        Category      @relation(fields: [categoryId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tagsOnPosts     TagsOnPosts[]

  @@map("post")
}

// Tambahan: Enum untuk status artikel
enum PostStatus {
  PUBLISHED
  DRAFT
  PENDING
}

// Tambahan: Enum untuk visibilitas artikel
enum Visibility {
  PUBLIC
  PRIVATE
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  @@map("category")
}

model Tag {
  id          String        @id @default(cuid())
  name        String        @unique // Tambahkan @unique di sini
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tagsOnPosts TagsOnPosts[]

  @@map("tag")
}

model TagsOnPosts {
  postId     String
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, tagId])
  @@map("tag_posts_post")
}
